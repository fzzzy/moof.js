
function random(max) {
  return Math.floor(Math.random() * max);
}

function* main() {
  let participants = new Map();
  let tiles = [];
  for (let y = 0; y < 16; y++) {
    let row = [];
    for (let x = 0; x < 16; x++) {
      row.push(0);
    }
    tiles.push(row);
  }
  console.log("hello room");

  while (true) {
    let msg = yield recv();
    console.log("room msg", JSON.stringify(msg));
    if (msg.pattern === 'join') {
      let pos = random(16) + "," + random(16);
      msg.data.pos = pos;
      msg.data.addr = msg.data.join;

      let joiner_id = msg.data.join;
      let joiner = address(joiner_id);

      participants[joiner_id] = {
        cast: joiner,
        addr: joiner_id,
        pos: pos,
        name: msg.data.name};

      let players = [];
      for (let i in participants) {
        players.push({
          name: participants[i].name,
          pos: participants[i].pos,
          addr: participants[i].addr});
        if (participants[i].addr !== joiner_id) {
          participants[i].cast(
            'room_join',
            msg.data);
        }
      }

      joiner('room', {tiles: tiles, players: players, server: msg.addr, pos: pos, name: msg.data.name}, true);
    } else if (msg.pattern === 'part') {
      console.log("Part", msg.data.part, participants);
      delete participants[msg.data.part];
      for (let i in participants) {
        participants[i].cast('room_part', msg.data);
      }
    } else if (msg.pattern === 'msg') {
      for (let i in participants) {
        participants[i].cast(
          'room_msg',
          {msg: participants[msg.addr].name + ': ' + msg.data.msg,
          addr: msg.addr});
      }
    } else if (msg.pattern === 'go') {
      for (let i in participants) {
        participants[i].cast('room_go', {go: msg.data.go, addr: msg.addr});
      }
    } else if (msg.pattern === 'dig') {
      let split = msg.data.dig.split(",");
      tiles[parseInt(split[1])][parseInt(split[0])] = parseInt(msg.data.tile);
      //console.log("NEWTILES", tiles);
      for (let i in participants) {
        participants[i].cast('room_dig', {dig: msg.data.dig, tile: msg.data.tile, addr: msg.addr});
      }
    }
  }
}

